name: Comprehensive Test Suite - Fertilizer Application Service

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/fertilizer-application/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/fertilizer-application/**'
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  TEST_TIMEOUT: 1800  # 30 minutes

jobs:
  # Unit and Integration Tests
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: services/fertilizer-application
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-html pytest-xdist
        pip install pytest-timeout pytest-mock
    
    - name: Run unit and integration tests
      working-directory: services/fertilizer-application
      run: |
        python run_tests.py --categories unit integration --verbose --coverage --parallel
      env:
        TESTING: true
        LOG_LEVEL: WARNING
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-integration-test-results
        path: services/fertilizer-application/test_reports/
        retention-days: 30
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: services/fertilizer-application/coverage.xml
        flags: unit-integration
        name: unit-integration-coverage

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: unit-integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: services/fertilizer-application
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-html pytest-xdist
        pip install pytest-timeout pytest-mock psutil
    
    - name: Run performance tests
      working-directory: services/fertilizer-application
      run: |
        python run_tests.py --categories performance --verbose --parallel --performance-threshold 5000
      env:
        TESTING: true
        LOG_LEVEL: WARNING
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: services/fertilizer-application/test_reports/
        retention-days: 30

  # Agricultural Validation Tests
  agricultural-validation-tests:
    name: Agricultural Validation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: unit-integration-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: services/fertilizer-application
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-html pytest-xdist
        pip install pytest-timeout pytest-mock
    
    - name: Run agricultural validation tests
      working-directory: services/fertilizer-application
      run: |
        python run_tests.py --categories agricultural_validation --verbose --coverage
      env:
        TESTING: true
        LOG_LEVEL: WARNING
        EXPERT_REVIEW: false  # Disable expert review for CI
    
    - name: Upload agricultural validation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: agricultural-validation-results
        path: services/fertilizer-application/test_reports/
        retention-days: 30

  # Comprehensive Tests (Nightly)
  comprehensive-tests:
    name: Comprehensive Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: services/fertilizer-application
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-html pytest-xdist
        pip install pytest-timeout pytest-mock psutil
    
    - name: Run comprehensive test suite
      working-directory: services/fertilizer-application
      run: |
        python run_tests.py --full --verbose --coverage --parallel
      env:
        TESTING: true
        LOG_LEVEL: WARNING
    
    - name: Upload comprehensive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: comprehensive-test-results
        path: services/fertilizer-application/test_reports/
        retention-days: 30
    
    - name: Upload comprehensive coverage
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: services/fertilizer-application/coverage.xml
        flags: comprehensive
        name: comprehensive-coverage

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install security tools
      working-directory: services/fertilizer-application
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
    
    - name: Run Bandit security scan
      working-directory: services/fertilizer-application
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
    
    - name: Run Safety check
      working-directory: services/fertilizer-application
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          services/fertilizer-application/bandit-report.json
          services/fertilizer-application/safety-report.json
        retention-days: 30

  # Code Quality Tests
  code-quality-tests:
    name: Code Quality Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install code quality tools
      working-directory: services/fertilizer-application
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 isort mypy pylint
    
    - name: Run Black code formatting check
      working-directory: services/fertilizer-application
      run: |
        black --check --diff src/ tests/
    
    - name: Run isort import sorting check
      working-directory: services/fertilizer-application
      run: |
        isort --check-only --diff src/ tests/
    
    - name: Run Flake8 linting
      working-directory: services/fertilizer-application
      run: |
        flake8 src/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run MyPy type checking
      working-directory: services/fertilizer-application
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional || true
    
    - name: Run Pylint
      working-directory: services/fertilizer-application
      run: |
        pylint src/ --output-format=json --reports=y > pylint-report.json || true
        pylint src/ --score=y
    
    - name: Upload code quality reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports
        path: services/fertilizer-application/pylint-report.json
        retention-days: 30

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, performance-tests, agricultural-validation-tests, security-tests, code-quality-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      with:
        path: test-artifacts/
    
    - name: Generate test summary
      run: |
        echo "# Test Summary Report" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results" >> test-summary.md
        echo "" >> test-summary.md
        
        # Check if artifacts exist and add to summary
        if [ -d "test-artifacts/unit-integration-test-results" ]; then
          echo "✅ Unit & Integration Tests: Completed" >> test-summary.md
        else
          echo "❌ Unit & Integration Tests: Failed" >> test-summary.md
        fi
        
        if [ -d "test-artifacts/performance-test-results" ]; then
          echo "✅ Performance Tests: Completed" >> test-summary.md
        else
          echo "❌ Performance Tests: Failed" >> test-summary.md
        fi
        
        if [ -d "test-artifacts/agricultural-validation-results" ]; then
          echo "✅ Agricultural Validation Tests: Completed" >> test-summary.md
        else
          echo "❌ Agricultural Validation Tests: Failed" >> test-summary.md
        fi
        
        if [ -d "test-artifacts/security-reports" ]; then
          echo "✅ Security Tests: Completed" >> test-summary.md
        else
          echo "❌ Security Tests: Failed" >> test-summary.md
        fi
        
        if [ -d "test-artifacts/code-quality-reports" ]; then
          echo "✅ Code Quality Tests: Completed" >> test-summary.md
        else
          echo "❌ Code Quality Tests: Failed" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "## Coverage Reports" >> test-summary.md
        echo "- Unit & Integration: Available in artifacts" >> test-summary.md
        echo "- Performance: Available in artifacts" >> test-summary.md
        echo "- Agricultural Validation: Available in artifacts" >> test-summary.md
        echo "" >> test-summary.md
        echo "## Next Steps" >> test-summary.md
        echo "1. Review any failed tests" >> test-summary.md
        echo "2. Check coverage reports" >> test-summary.md
        echo "3. Address security and code quality issues" >> test-summary.md
        echo "4. Run tests locally if needed" >> test-summary.md
    
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  # Notification
  notify:
    name: Notify Test Results
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: always() && (github.event_name == 'push' || github.event_name == 'pull_request')
    
    steps:
    - name: Notify on success
      if: needs.test-summary.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        echo "Coverage reports and detailed results are available in artifacts."
    
    - name: Notify on failure
      if: needs.test-summary.result == 'failure'
      run: |
        echo "❌ Some tests failed!"
        echo "Please review the test results and fix any issues."
        echo "Detailed reports are available in artifacts."