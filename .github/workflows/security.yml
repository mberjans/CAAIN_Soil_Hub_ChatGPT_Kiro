name: Security Scanning Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
          
      - name: Scan dependencies for vulnerabilities
        run: |
          # Scan all requirements files
          find . -name "requirements*.txt" -exec safety check -r {} \;
          
      - name: Generate dependency report
        run: |
          safety check --json --output dependency-vulnerabilities.json || true
          
      - name: Upload dependency scan results
        uses: actions/upload-artifact@v3
        with:
          name: dependency-scan-results
          path: dependency-vulnerabilities.json

  # Static code security analysis
  static-security-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip bandit[toml]
          
      - name: Run Bandit security scan
        run: |
          bandit -r services/ -f json -o bandit-security-report.json -ll
          
      - name: Run Semgrep security scan
        run: |
          python -m pip install semgrep
          semgrep --config=auto --json --output=semgrep-security-report.json services/
          
      - name: Upload static analysis results
        uses: actions/upload-artifact@v3
        with:
          name: static-security-analysis
          path: |
            bandit-security-report.json
            semgrep-security-report.json

  # Agricultural data security checks
  agricultural-data-security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cryptography pydantic
          
      - name: Check for hardcoded agricultural data
        run: |
          python scripts/check_hardcoded_farm_data.py
          
      - name: Validate encryption implementation
        run: |
          python scripts/validate_encryption.py
          
      - name: Check GPS coordinate protection
        run: |
          python scripts/check_gps_protection.py
          
      - name: Validate API key management
        run: |
          python scripts/validate_api_key_management.py
          
      - name: Check agricultural data anonymization
        run: |
          python scripts/check_data_anonymization.py

  # API security testing
  api-security-testing:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: afas_security_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r services/user-management/requirements.txt
          pip install pytest pytest-asyncio httpx
          
      - name: Start test services
        run: |
          # Start minimal services for security testing
          cd services/user-management
          uvicorn src.main:app --host 0.0.0.0 --port 8005 &
          sleep 5
          
      - name: Test authentication security
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/afas_security_test
        run: |
          python -m pytest tests/security/test_authentication.py -v
          
      - name: Test authorization controls
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/afas_security_test
        run: |
          python -m pytest tests/security/test_authorization.py -v
          
      - name: Test input validation
        run: |
          python -m pytest tests/security/test_input_validation.py -v
          
      - name: Test SQL injection prevention
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/afas_security_test
        run: |
          python -m pytest tests/security/test_sql_injection.py -v
          
      - name: Test rate limiting
        run: |
          python -m pytest tests/security/test_rate_limiting.py -v

  # Container security (if using containers in production)
  container-security:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Build test container
        run: |
          # Create a minimal Dockerfile for testing
          cat > Dockerfile.test << 'EOF'
          FROM python:3.11-slim
          WORKDIR /app
          COPY services/recommendation-engine/requirements.txt .
          RUN pip install -r requirements.txt
          COPY services/recommendation-engine/ .
          CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]
          EOF
          docker build -f Dockerfile.test -t afas-test:latest .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'afas-test:latest'
          format: 'json'
          output: 'trivy-results.json'
          
      - name: Upload container scan results
        uses: actions/upload-artifact@v3
        with:
          name: container-security-scan
          path: trivy-results.json

  # Secrets scanning
  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for secret scanning
          
      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: Check for agricultural API keys
        run: |
          python scripts/check_agricultural_api_keys.py
          
      - name: Validate environment variable usage
        run: |
          python scripts/validate_env_vars.py

  # Generate security report
  security-report:
    runs-on: ubuntu-latest
    needs: [dependency-scan, static-security-analysis, agricultural-data-security, api-security-testing, secrets-scan]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all security scan results
        uses: actions/download-artifact@v3
        with:
          path: security-results/
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Generate comprehensive security report
        run: |
          python scripts/generate_security_report.py --input-dir=security-results/
          
      - name: Check security thresholds
        run: |
          python scripts/check_security_thresholds.py
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-security-report
          path: |
            security-report.html
            security-metrics.json
            
      - name: Comment on PR with security results
        if: github.event_name == 'pull_request'
        run: |
          echo "Security scanning completed. Check artifacts for detailed results."
          echo "::notice title=Security Scan::All security checks have been completed. Review artifacts for any issues."
          
      - name: Fail on critical vulnerabilities
        run: |
          python scripts/fail_on_critical_vulnerabilities.py --report=security-metrics.json