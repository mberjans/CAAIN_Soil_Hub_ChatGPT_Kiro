# CAAIN Soil Hub - Production Deployment Pipeline
# Automated CI/CD pipeline for production deployment

name: Production Deployment Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: caain-soil-hub/crop-taxonomy

jobs:
  # Security and Quality Checks
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd services/crop-taxonomy
          pip install -r requirements.txt
          pip install safety bandit

      - name: Run security audit
        run: |
          cd services/crop-taxonomy
          python security-audit.py

      - name: Check for vulnerabilities
        run: |
          cd services/crop-taxonomy
          safety check --json

      - name: Run bandit security linter
        run: |
          cd services/crop-taxonomy/src
          bandit -r . -f json -o bandit-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            services/crop-taxonomy/security-audit-report.json
            services/crop-taxonomy/src/bandit-report.json

  # Testing
  test:
    runs-on: ubuntu-latest
    needs: security-audit
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_crop_taxonomy
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd services/crop-taxonomy
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run unit tests
        run: |
          cd services/crop-taxonomy
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Run agricultural validation tests
        run: |
          cd services/crop-taxonomy
          pytest tests/agricultural/ -v

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: services/crop-taxonomy/coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            services/crop-taxonomy/htmlcov/
            services/crop-taxonomy/coverage.xml

  # Agricultural Validation
  agricultural-validation:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd services/crop-taxonomy
          pip install -r requirements.txt

      - name: Run agricultural validation
        run: |
          cd services/crop-taxonomy
          python -m pytest tests/agricultural/ -v --tb=short

      - name: Validate agricultural logic
        run: |
          cd services/crop-taxonomy
          python scripts/validate_agricultural_logic.py

  # Build and Push Docker Images
  build:
    runs-on: ubuntu-latest
    needs: [test, agricultural-validation]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/crop-taxonomy
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          # Example: kubectl apply -f k8s/staging/

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          # Add smoke test commands here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here
          # Example: kubectl apply -f k8s/production/

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add health check commands here

      - name: Notify deployment success
        run: |
          echo "Production deployment successful!"
          # Add notification commands here

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install locust

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          # Add performance test commands here

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

  # Documentation Generation
  docs:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd services/crop-taxonomy
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme

      - name: Generate API documentation
        run: |
          cd services/crop-taxonomy
          # Generate API docs from OpenAPI spec
          python -c "
          import uvicorn
          from src.main import app
          import json
          with open('openapi.json', 'w') as f:
              json.dump(app.openapi(), f, indent=2)
          "

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: api-documentation
          path: services/crop-taxonomy/openapi.json

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test]
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Production deployment successful!"
          else
            echo "❌ Production deployment failed!"
          fi